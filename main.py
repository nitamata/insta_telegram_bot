import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from config import BOT_TOKEN
from instagram import login_instagram, get_engaged_users, like_and_follow
from scheduler import start_schedule

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

with open("db.json", "r") as f:
    db = json.load(f)

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å Instagram –∞–∫–∫–∞—É–Ω—Ç"))
keyboard.add(KeyboardButton("üéØ –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å"))
keyboard.add(KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"))
keyboard.add(KeyboardButton("üõë –°—Ç–æ–ø"))
keyboard.add(KeyboardButton("üìä –û—Ç—á–µ—Ç"))

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å Instagram –∞–∫–∫–∞—É–Ω—Ç")
async def add_account(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å):")

@dp.message_handler(lambda msg: msg.text == "üéØ –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å")
async def add_target(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –Ω–∏–∫–Ω–µ–π–º —Ü–µ–ª–∏ (–±–µ–∑ @):")

@dp.message_handler(lambda msg: msg.text == "üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")
async def start_parsing(message: types.Message):
    user_id = str(message.from_user.id)
    user_data = db["users"].get(user_id)
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å Instagram –∞–∫–∫–∞—É–Ω—Ç!")
        return
    cl = login_instagram(user_data["instagram_username"], user_data["instagram_password"])
    all_targets = user_data.get("targets", [])
    report = []
    db["stop_flags"][user_id] = "run"

    for target in all_targets:
        users = get_engaged_users(target)
        await message.answer(f"–ù–∞–π–¥–µ–Ω–æ: {len(users)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —É @{target}")
        await asyncio.to_thread(like_and_follow, cl, users[:10], user_id, db["stop_flags"], report)

    db["reports"][user_id] = report
    with open("db.json", "w") as f:
        json.dump(db, f)
    await message.answer("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!")

@dp.message_handler(lambda msg: msg.text == "üõë –°—Ç–æ–ø")
async def stop_task(message: types.Message):
    user_id = str(message.from_user.id)
    db["stop_flags"][user_id] = "stop"
    await message.answer("‚õî –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    with open("db.json", "w") as f:
        json.dump(db, f)

@dp.message_handler(lambda msg: msg.text == "üìä –û—Ç—á–µ—Ç")
async def show_report(message: types.Message):
    user_id = str(message.from_user.id)
    report = db.get("reports", {}).get(user_id, [])
    if not report:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–∞.")
    else:
        await message.answer("–í–æ—Ç –Ω–∞ –∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å:
" + "\n".join(report))

@dp.message_handler()
async def handle_text(message: types.Message):
    user_id = str(message.from_user.id)
    parts = message.text.strip().split()
    if len(parts) == 2:
        login, password = parts
        db["users"][user_id] = {
            "instagram_username": login,
            "instagram_password": password,
            "targets": []
        }
        await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
    elif len(parts) == 1:
        db["users"].setdefault(user_id, {}).setdefault("targets", []).append(parts[0])
        await message.answer(f"üéØ –¶–µ–ª—å @{parts[0]} –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    with open("db.json", "w") as f:
        json.dump(db, f)

def scheduled_parsing():
    import threading
    for user_id, user_data in db["users"].items():
        def task():
            try:
                cl = login_instagram(user_data["instagram_username"], user_data["instagram_password"])
                all_targets = user_data.get("targets", [])
                report = []
                for target in all_targets:
                    users = get_engaged_users(target)
                    like_and_follow(cl, users[:10], user_id, db["stop_flags"], report)
                db["reports"][user_id] = report
                with open("db.json", "w") as f:
                    json.dump(db, f)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {e}")
        threading.Thread(target=task).start()

if __name__ == "__main__":
    start_schedule()
    executor.start_polling(dp, skip_updates=True)